{"ast":null,"code":"import React,{useState}from'react';import CsvLoader from'./components/CsvLoader';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[counties,setCounties]=useState([]);// Store all counties from CSV\nconst[selectedCounty,setSelectedCounty]=useState('');// Selected county\nconst[selectedCrop,setSelectedCrop]=useState('');// Selected crop type\nconst[availableCrops,setAvailableCrops]=useState([]);// Filtered crops\n// Log parsed CSV data to verify\nconst handleDataLoaded=csvData=>{console.log('Parsed CSV Data:',csvData);// Log the parsed CSV data\nsetCounties(csvData);// Store parsed county data\n};const handleCountyChange=e=>{console.log('Selected County:',e.target.value);// Log selected county\nsetSelectedCounty(e.target.value);// Update selected county\n};const handleCropChange=e=>{console.log('Selected Crop:',e.target.value);// Log selected crop type\nsetSelectedCrop(e.target.value);// Update selected crop type\n};const handleSubmit=e=>{e.preventDefault();// Filter the crops based on selected county and crop type\nconst filteredCrops=counties.filter(county=>(selectedCounty===''||county['County Name']===selectedCounty)&&(selectedCrop===''||county['Crop']===selectedCrop));setAvailableCrops(filteredCrops);// Set the filtered crops to display\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"mission-statement\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Welcome to the Texas Crop Rotation Planner\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Our mission is to provide sustainable crop rotation recommendations to farmers across Texas, helping them optimize yield, protect the soil, and promote environmentally-friendly farming practices.\"})]}),/*#__PURE__*/_jsx(CsvLoader,{onDataLoaded:handleDataLoaded}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"county-select\",className:\"form-label\",children:\"Select County:\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"county-select\",value:selectedCounty,onChange:handleCountyChange,className:\"form-select\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"--Choose a county--\"}),Array.from(new Set(counties.map(county=>county['County Name']))).map((countyName,index)=>/*#__PURE__*/_jsx(\"option\",{value:countyName,children:countyName},index))]}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"crop-type-select\",className:\"form-label\",children:\"Select Crop Type:\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"crop-type-select\",value:selectedCrop,onChange:handleCropChange,className:\"form-select\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"--Choose a crop type--\"}),Array.from(new Set(counties.map(county=>county['Crop Type']))).map((crop,index)=>/*#__PURE__*/_jsx(\"option\",{value:crop,children:crop},index))]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn btn-primary\",children:\"Get Crop Recommendations\"})]}),availableCrops.length>0&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Available Crops\"}),/*#__PURE__*/_jsx(\"ul\",{children:availableCrops.map((crop,index)=>/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:crop.Crop}),\"  \",/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Type:\"}),\" \",crop['Crop Type']]}),\" \"]},index))})]})]});}export default App;","map":{"version":3,"names":["React","useState","CsvLoader","jsx","_jsx","jsxs","_jsxs","App","counties","setCounties","selectedCounty","setSelectedCounty","selectedCrop","setSelectedCrop","availableCrops","setAvailableCrops","handleDataLoaded","csvData","console","log","handleCountyChange","e","target","value","handleCropChange","handleSubmit","preventDefault","filteredCrops","filter","county","className","children","onDataLoaded","onSubmit","htmlFor","id","onChange","Array","from","Set","map","countyName","index","crop","type","length","Crop"],"sources":["/workspaces/crop_rotation/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport CsvLoader from './components/CsvLoader';\nimport './App.css';\n\n\nfunction App() {\n  const [counties, setCounties] = useState([]);  // Store all counties from CSV\n  const [selectedCounty, setSelectedCounty] = useState('');  // Selected county\n  const [selectedCrop, setSelectedCrop] = useState('');  // Selected crop type\n  const [availableCrops, setAvailableCrops] = useState([]);  // Filtered crops\n\n  // Log parsed CSV data to verify\n  const handleDataLoaded = (csvData) => {\n    console.log('Parsed CSV Data:', csvData);  // Log the parsed CSV data\n    setCounties(csvData);  // Store parsed county data\n  };\n\n  const handleCountyChange = (e) => {\n    console.log('Selected County:', e.target.value);  // Log selected county\n    setSelectedCounty(e.target.value);  // Update selected county\n  };\n\n  const handleCropChange = (e) => {\n    console.log('Selected Crop:', e.target.value);  // Log selected crop type\n    setSelectedCrop(e.target.value);  // Update selected crop type\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Filter the crops based on selected county and crop type\n    const filteredCrops = counties.filter(county =>\n      (selectedCounty === '' || county['County Name'] === selectedCounty) &&\n      (selectedCrop === '' || county['Crop'] === selectedCrop)\n    );\n    setAvailableCrops(filteredCrops);  // Set the filtered crops to display\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"mission-statement\">\n        <h1>Welcome to the Texas Crop Rotation Planner</h1>\n        <p>\n          Our mission is to provide sustainable crop rotation recommendations to\n          farmers across Texas, helping them optimize yield, protect the soil,\n          and promote environmentally-friendly farming practices.\n        </p>\n      </header>\n\n      {/* Load and parse the CSV data */}\n      <CsvLoader onDataLoaded={handleDataLoaded} />\n\n      {/* Form for filtering crops */}\n      <form onSubmit={handleSubmit} className=\"form-group\">\n        {/* Dropdown for county selection */}\n        <label htmlFor=\"county-select\" className=\"form-label\">Select County:</label>\n        <select id=\"county-select\" value={selectedCounty} onChange={handleCountyChange} className=\"form-select\">\n          <option value=\"\">--Choose a county--</option>\n          {Array.from(new Set(counties.map(county => county['County Name']))).map((countyName, index) => (\n            <option key={index} value={countyName}>\n              {countyName}\n            </option>\n          ))}\n        </select>\n\n        {/* Dropdown for crop type selection */}\n        <label htmlFor=\"crop-type-select\" className=\"form-label\">Select Crop Type:</label>\n        <select id=\"crop-type-select\" value={selectedCrop} onChange={handleCropChange} className=\"form-select\">\n          <option value=\"\">--Choose a crop type--</option>\n          {Array.from(new Set(counties.map(county => county['Crop Type']))).map((crop, index) => (\n            <option key={index} value={crop}>\n              {crop}\n            </option>\n          ))}\n        </select>\n\n        <button type=\"submit\" className=\"btn btn-primary\">Get Crop Recommendations</button>\n      </form>\n\n      {/* Display filtered crops */}\n      {availableCrops.length > 0 && (\n        <div>\n          <h2>Available Crops</h2>\n          <ul>\n            {availableCrops.map((crop, index) => (\n              <li key={index}>\n                <h3>{crop.Crop}</h3>  {/* Display the crop name */}\n                <p><strong>Type:</strong> {crop['Crop Type']}</p> {/* Display the crop type */}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,SAAS,KAAM,wBAAwB,CAC9C,MAAO,WAAW,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAGnB,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGR,QAAQ,CAAC,EAAE,CAAC,CAAG;AAC/C,KAAM,CAACS,cAAc,CAAEC,iBAAiB,CAAC,CAAGV,QAAQ,CAAC,EAAE,CAAC,CAAG;AAC3D,KAAM,CAACW,YAAY,CAAEC,eAAe,CAAC,CAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAG;AACvD,KAAM,CAACa,cAAc,CAAEC,iBAAiB,CAAC,CAAGd,QAAQ,CAAC,EAAE,CAAC,CAAG;AAE3D;AACA,KAAM,CAAAe,gBAAgB,CAAIC,OAAO,EAAK,CACpCC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAEF,OAAO,CAAC,CAAG;AAC3CR,WAAW,CAACQ,OAAO,CAAC,CAAG;AACzB,CAAC,CAED,KAAM,CAAAG,kBAAkB,CAAIC,CAAC,EAAK,CAChCH,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAEE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAG;AAClDZ,iBAAiB,CAACU,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAG;AACtC,CAAC,CAED,KAAM,CAAAC,gBAAgB,CAAIH,CAAC,EAAK,CAC9BH,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAEE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAG;AAChDV,eAAe,CAACQ,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAG;AACpC,CAAC,CAED,KAAM,CAAAE,YAAY,CAAIJ,CAAC,EAAK,CAC1BA,CAAC,CAACK,cAAc,CAAC,CAAC,CAClB;AACA,KAAM,CAAAC,aAAa,CAAGnB,QAAQ,CAACoB,MAAM,CAACC,MAAM,EAC1C,CAACnB,cAAc,GAAK,EAAE,EAAImB,MAAM,CAAC,aAAa,CAAC,GAAKnB,cAAc,IACjEE,YAAY,GAAK,EAAE,EAAIiB,MAAM,CAAC,MAAM,CAAC,GAAKjB,YAAY,CACzD,CAAC,CACDG,iBAAiB,CAACY,aAAa,CAAC,CAAG;AACrC,CAAC,CAED,mBACErB,KAAA,QAAKwB,SAAS,CAAC,KAAK,CAAAC,QAAA,eAClBzB,KAAA,WAAQwB,SAAS,CAAC,mBAAmB,CAAAC,QAAA,eACnC3B,IAAA,OAAA2B,QAAA,CAAI,4CAA0C,CAAI,CAAC,cACnD3B,IAAA,MAAA2B,QAAA,CAAG,qMAIH,CAAG,CAAC,EACE,CAAC,cAGT3B,IAAA,CAACF,SAAS,EAAC8B,YAAY,CAAEhB,gBAAiB,CAAE,CAAC,cAG7CV,KAAA,SAAM2B,QAAQ,CAAER,YAAa,CAACK,SAAS,CAAC,YAAY,CAAAC,QAAA,eAElD3B,IAAA,UAAO8B,OAAO,CAAC,eAAe,CAACJ,SAAS,CAAC,YAAY,CAAAC,QAAA,CAAC,gBAAc,CAAO,CAAC,cAC5EzB,KAAA,WAAQ6B,EAAE,CAAC,eAAe,CAACZ,KAAK,CAAEb,cAAe,CAAC0B,QAAQ,CAAEhB,kBAAmB,CAACU,SAAS,CAAC,aAAa,CAAAC,QAAA,eACrG3B,IAAA,WAAQmB,KAAK,CAAC,EAAE,CAAAQ,QAAA,CAAC,qBAAmB,CAAQ,CAAC,CAC5CM,KAAK,CAACC,IAAI,CAAC,GAAI,CAAAC,GAAG,CAAC/B,QAAQ,CAACgC,GAAG,CAACX,MAAM,EAAIA,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAACW,GAAG,CAAC,CAACC,UAAU,CAAEC,KAAK,gBACxFtC,IAAA,WAAoBmB,KAAK,CAAEkB,UAAW,CAAAV,QAAA,CACnCU,UAAU,EADAC,KAEL,CACT,CAAC,EACI,CAAC,cAGTtC,IAAA,UAAO8B,OAAO,CAAC,kBAAkB,CAACJ,SAAS,CAAC,YAAY,CAAAC,QAAA,CAAC,mBAAiB,CAAO,CAAC,cAClFzB,KAAA,WAAQ6B,EAAE,CAAC,kBAAkB,CAACZ,KAAK,CAAEX,YAAa,CAACwB,QAAQ,CAAEZ,gBAAiB,CAACM,SAAS,CAAC,aAAa,CAAAC,QAAA,eACpG3B,IAAA,WAAQmB,KAAK,CAAC,EAAE,CAAAQ,QAAA,CAAC,wBAAsB,CAAQ,CAAC,CAC/CM,KAAK,CAACC,IAAI,CAAC,GAAI,CAAAC,GAAG,CAAC/B,QAAQ,CAACgC,GAAG,CAACX,MAAM,EAAIA,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAACW,GAAG,CAAC,CAACG,IAAI,CAAED,KAAK,gBAChFtC,IAAA,WAAoBmB,KAAK,CAAEoB,IAAK,CAAAZ,QAAA,CAC7BY,IAAI,EADMD,KAEL,CACT,CAAC,EACI,CAAC,cAETtC,IAAA,WAAQwC,IAAI,CAAC,QAAQ,CAACd,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAC,0BAAwB,CAAQ,CAAC,EAC/E,CAAC,CAGNjB,cAAc,CAAC+B,MAAM,CAAG,CAAC,eACxBvC,KAAA,QAAAyB,QAAA,eACE3B,IAAA,OAAA2B,QAAA,CAAI,iBAAe,CAAI,CAAC,cACxB3B,IAAA,OAAA2B,QAAA,CACGjB,cAAc,CAAC0B,GAAG,CAAC,CAACG,IAAI,CAAED,KAAK,gBAC9BpC,KAAA,OAAAyB,QAAA,eACE3B,IAAA,OAAA2B,QAAA,CAAKY,IAAI,CAACG,IAAI,CAAK,CAAC,KAAE,cACtBxC,KAAA,MAAAyB,QAAA,eAAG3B,IAAA,WAAA2B,QAAA,CAAQ,OAAK,CAAQ,CAAC,IAAC,CAACY,IAAI,CAAC,WAAW,CAAC,EAAI,CAAC,IAAC,GAF3CD,KAGL,CACL,CAAC,CACA,CAAC,EACF,CACN,EACE,CAAC,CAEV,CAEA,cAAe,CAAAnC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}