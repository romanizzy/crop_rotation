{"ast":null,"code":"var _jsxFileName = \"/Users/sarahsfolder/Documents/crop-rotation-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CsvLoader from './components/CsvLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [counties, setCounties] = useState([]); // Store all counties from CSV\n  const [selectedCounty, setSelectedCounty] = useState(''); // Selected county\n  const [availableCrops, setAvailableCrops] = useState([]); // Filtered crops\n\n  // Log parsed CSV data to verify\n  const handleDataLoaded = csvData => {\n    console.log('Parsed CSV Data:', csvData); // Log the parsed CSV data\n    setCounties(csvData); // Store parsed county data\n  };\n  const handleCountyChange = e => {\n    console.log('Selected County:', e.target.value); // Log selected county\n    setSelectedCounty(e.target.value); // Update selected county\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const filteredCrops = counties.filter(county => county['County Name'] === selectedCounty);\n    setAvailableCrops(filteredCrops);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Texas Crop Rotation Planner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CsvLoader, {\n      onDataLoaded: handleDataLoaded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"county-select\",\n        className: \"form-label\",\n        children: \"Select County:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"county-select\",\n        value: selectedCounty,\n        onChange: handleCountyChange,\n        className: \"form-select\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Choose a county--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), Array.from(new Set(counties.map(county => county['County Name']))).map((countyName, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: countyName,\n          children: countyName\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        children: \"Get Crop Recommendations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), availableCrops.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Available Crops\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: availableCrops.map((crop, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [crop.Crop, \" - Plant: \", crop['Planting Season'], \", Harvest: \", crop['Harvest Season']]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bvUS9MqEhyH5E+ucCgO2/3FMkfE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","CsvLoader","jsxDEV","_jsxDEV","App","_s","counties","setCounties","selectedCounty","setSelectedCounty","availableCrops","setAvailableCrops","handleDataLoaded","csvData","console","log","handleCountyChange","e","target","value","handleSubmit","preventDefault","filteredCrops","filter","county","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDataLoaded","onSubmit","htmlFor","id","onChange","Array","from","Set","map","countyName","index","type","length","crop","Crop","_c","$RefreshReg$"],"sources":["/Users/sarahsfolder/Documents/crop-rotation-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport CsvLoader from './components/CsvLoader';\n\nfunction App() {\n  const [counties, setCounties] = useState([]);  // Store all counties from CSV\n  const [selectedCounty, setSelectedCounty] = useState('');  // Selected county\n  const [availableCrops, setAvailableCrops] = useState([]);  // Filtered crops\n\n  // Log parsed CSV data to verify\n  const handleDataLoaded = (csvData) => {\n    console.log('Parsed CSV Data:', csvData);  // Log the parsed CSV data\n    setCounties(csvData);  // Store parsed county data\n  };\n\n  const handleCountyChange = (e) => {\n    console.log('Selected County:', e.target.value);  // Log selected county\n    setSelectedCounty(e.target.value);  // Update selected county\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const filteredCrops = counties.filter(county => county['County Name'] === selectedCounty);\n    setAvailableCrops(filteredCrops);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Texas Crop Rotation Planner</h1>\n\n      {/* Load and parse the CSV data */}\n      <CsvLoader onDataLoaded={handleDataLoaded} />\n\n      {/* Dropdown for county selection */}\n      <form onSubmit={handleSubmit} className=\"form-group\">\n        <label htmlFor=\"county-select\" className=\"form-label\">Select County:</label>\n        <select id=\"county-select\" value={selectedCounty} onChange={handleCountyChange} className=\"form-select\">\n          <option value=\"\">--Choose a county--</option>\n          {Array.from(new Set(counties.map(county => county['County Name']))).map((countyName, index) => (\n            <option key={index} value={countyName}>\n              {countyName}\n            </option>\n          ))}\n        </select>\n\n        <button type=\"submit\" className=\"btn btn-primary\">Get Crop Recommendations</button>\n      </form>\n\n      {/* Display filtered crops */}\n      {availableCrops.length > 0 && (\n        <div>\n          <h2>Available Crops</h2>\n          <ul>\n            {availableCrops.map((crop, index) => (\n              <li key={index}>\n                {crop.Crop} - Plant: {crop['Planting Season']}, Harvest: {crop['Harvest Season']}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}