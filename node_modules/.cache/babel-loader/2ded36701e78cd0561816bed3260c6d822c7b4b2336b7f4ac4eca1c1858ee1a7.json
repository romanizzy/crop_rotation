{"ast":null,"code":"var _jsxFileName = \"/Users/sarahsfolder/Documents/crop-rotation-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CsvLoader from './components/CsvLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [counties, setCounties] = useState([]); // Store all counties from CSV\n  const [selectedCounty, setSelectedCounty] = useState(''); // Selected county\n  const [selectedRegion, setSelectedRegion] = useState(''); // Selected region\n  const [selectedCropType, setSelectedCropType] = useState(''); // Selected crop type\n  const [availableCrops, setAvailableCrops] = useState([]); // Filtered crops\n\n  // Log parsed CSV data to verify\n  const handleDataLoaded = csvData => {\n    console.log('Parsed CSV Data:', csvData); // Log the parsed CSV data\n    setCounties(csvData); // Store parsed county data\n  };\n  const handleCountyChange = e => {\n    console.log('Selected County:', e.target.value); // Log selected county\n    setSelectedCounty(e.target.value); // Update selected county\n  };\n  const handleRegionChange = e => {\n    console.log('Selected Region:', e.target.value); // Log selected region\n    setSelectedRegion(e.target.value); // Update selected region\n  };\n  const handleCropTypeChange = e => {\n    console.log('Selected Crop Type:', e.target.value); // Log selected crop type\n    setSelectedCropType(e.target.value); // Update selected crop type\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    // Filter the crops based on selected county, region, and crop type\n    const filteredCrops = counties.filter(county => (selectedCounty === '' || county['County Name'] === selectedCounty) && (selectedRegion === '' || county['Region Name'] === selectedRegion) && (selectedCropType === '' || county['Crop Type'] === selectedCropType));\n    setAvailableCrops(filteredCrops); // Set the filtered crops to display\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Texas Crop Rotation Planner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CsvLoader, {\n      onDataLoaded: handleDataLoaded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"county-select\",\n        className: \"form-label\",\n        children: \"Select County:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"county-select\",\n        value: selectedCounty,\n        onChange: handleCountyChange,\n        className: \"form-select\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Choose a county--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), Array.from(new Set(counties.map(county => county['County Name']))).map((countyName, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: countyName,\n          children: countyName\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"region-select\",\n        className: \"form-label\",\n        children: \"Select Region:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"region-select\",\n        value: selectedRegion,\n        onChange: handleRegionChange,\n        className: \"form-select\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Choose a region--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), Array.from(new Set(counties.map(county => county['Region Name']))).map((regionName, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: regionName,\n          children: regionName\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"crop-type-select\",\n        className: \"form-label\",\n        children: \"Select Crop Type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"crop-type-select\",\n        value: selectedCropType,\n        onChange: handleCropTypeChange,\n        className: \"form-select\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Choose a crop type--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), Array.from(new Set(counties.map(county => county['Crop Type']))).map((cropType, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: cropType,\n          children: cropType\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        children: \"Get Crop Recommendations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), availableCrops.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Available Crops\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: availableCrops.map((crop, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [crop.Crop, \" - Plant: \", crop['Planting Season'], \", Harvest: \", crop['Harvest Season']]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"EpMECDJvjetBAZCbrQP9MzB9HdQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","CsvLoader","jsxDEV","_jsxDEV","App","_s","counties","setCounties","selectedCounty","setSelectedCounty","selectedRegion","setSelectedRegion","selectedCropType","setSelectedCropType","availableCrops","setAvailableCrops","handleDataLoaded","csvData","console","log","handleCountyChange","e","target","value","handleRegionChange","handleCropTypeChange","handleSubmit","preventDefault","filteredCrops","filter","county","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDataLoaded","onSubmit","htmlFor","id","onChange","Array","from","Set","map","countyName","index","regionName","cropType","type","length","crop","Crop","_c","$RefreshReg$"],"sources":["/Users/sarahsfolder/Documents/crop-rotation-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport CsvLoader from './components/CsvLoader';\n\nfunction App() {\n  const [counties, setCounties] = useState([]);  // Store all counties from CSV\n  const [selectedCounty, setSelectedCounty] = useState('');  // Selected county\n  const [selectedRegion, setSelectedRegion] = useState('');  // Selected region\n  const [selectedCropType, setSelectedCropType] = useState('');  // Selected crop type\n  const [availableCrops, setAvailableCrops] = useState([]);  // Filtered crops\n\n  // Log parsed CSV data to verify\n  const handleDataLoaded = (csvData) => {\n    console.log('Parsed CSV Data:', csvData);  // Log the parsed CSV data\n    setCounties(csvData);  // Store parsed county data\n  };\n\n  const handleCountyChange = (e) => {\n    console.log('Selected County:', e.target.value);  // Log selected county\n    setSelectedCounty(e.target.value);  // Update selected county\n  };\n\n  const handleRegionChange = (e) => {\n    console.log('Selected Region:', e.target.value);  // Log selected region\n    setSelectedRegion(e.target.value);  // Update selected region\n  };\n\n  const handleCropTypeChange = (e) => {\n    console.log('Selected Crop Type:', e.target.value);  // Log selected crop type\n    setSelectedCropType(e.target.value);  // Update selected crop type\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Filter the crops based on selected county, region, and crop type\n    const filteredCrops = counties.filter(county =>\n      (selectedCounty === '' || county['County Name'] === selectedCounty) &&\n      (selectedRegion === '' || county['Region Name'] === selectedRegion) &&\n      (selectedCropType === '' || county['Crop Type'] === selectedCropType)\n    );\n    setAvailableCrops(filteredCrops);  // Set the filtered crops to display\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Texas Crop Rotation Planner</h1>\n\n      {/* Load and parse the CSV data */}\n      <CsvLoader onDataLoaded={handleDataLoaded} />\n\n      {/* Form for filtering crops */}\n      <form onSubmit={handleSubmit} className=\"form-group\">\n        {/* Dropdown for county selection */}\n        <label htmlFor=\"county-select\" className=\"form-label\">Select County:</label>\n        <select id=\"county-select\" value={selectedCounty} onChange={handleCountyChange} className=\"form-select\">\n          <option value=\"\">--Choose a county--</option>\n          {Array.from(new Set(counties.map(county => county['County Name']))).map((countyName, index) => (\n            <option key={index} value={countyName}>\n              {countyName}\n            </option>\n          ))}\n        </select>\n\n        {/* Dropdown for region selection */}\n        <label htmlFor=\"region-select\" className=\"form-label\">Select Region:</label>\n        <select id=\"region-select\" value={selectedRegion} onChange={handleRegionChange} className=\"form-select\">\n          <option value=\"\">--Choose a region--</option>\n          {Array.from(new Set(counties.map(county => county['Region Name']))).map((regionName, index) => (\n            <option key={index} value={regionName}>\n              {regionName}\n            </option>\n          ))}\n        </select>\n\n        {/* Dropdown for crop type selection */}\n        <label htmlFor=\"crop-type-select\" className=\"form-label\">Select Crop Type:</label>\n        <select id=\"crop-type-select\" value={selectedCropType} onChange={handleCropTypeChange} className=\"form-select\">\n          <option value=\"\">--Choose a crop type--</option>\n          {Array.from(new Set(counties.map(county => county['Crop Type']))).map((cropType, index) => (\n            <option key={index} value={cropType}>\n              {cropType}\n            </option>\n          ))}\n        </select>\n\n        <button type=\"submit\" className=\"btn btn-primary\">Get Crop Recommendations</button>\n      </form>\n\n      {/* Display filtered crops */}\n      {availableCrops.length > 0 && (\n        <div>\n          <h2>Available Crops</h2>\n          <ul>\n            {availableCrops.map((crop, index) => (\n              <li key={index}>\n                {crop.Crop} - Plant: {crop['Planting Season']}, Harvest: {crop['Harvest Season']}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}