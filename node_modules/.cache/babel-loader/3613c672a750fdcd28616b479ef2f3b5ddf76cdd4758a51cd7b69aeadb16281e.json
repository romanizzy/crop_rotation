{"ast":null,"code":"var _jsxFileName = \"/Users/sarahsfolder/Documents/crop-rotation-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CountyInput from './components/CountyInput';\nimport CropRecommendations from './components/CropRecommendations';\nimport CsvLoader from './components/CsvLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [counties, setCounties] = useState([]); // Store counties data from CSV\n\n  const handleSubmit = (county, currentCrop) => {\n    // This function will use the counties data for further processing\n    console.log('Counties data:', counties);\n    // Example: Find the district based on county\n    const countyData = counties.find(c => c.County === county);\n    if (countyData) {\n      console.log(`The county ${county} belongs to ${countyData.District}`);\n    } else {\n      console.log('County not found.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Crop Rotation Planner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CsvLoader, {\n      onDataLoaded: setCounties\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CountyInput, {\n      onSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"tH/jdDYF0N5O++YI1xea/5hODTE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","CountyInput","CropRecommendations","CsvLoader","jsxDEV","_jsxDEV","App","_s","counties","setCounties","handleSubmit","county","currentCrop","console","log","countyData","find","c","County","District","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDataLoaded","onSubmit","_c","$RefreshReg$"],"sources":["/Users/sarahsfolder/Documents/crop-rotation-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport CountyInput from './components/CountyInput';\nimport CropRecommendations from './components/CropRecommendations';\nimport CsvLoader from './components/CsvLoader';\n\nfunction App() {\n  const [counties, setCounties] = useState([]); // Store counties data from CSV\n\n  const handleSubmit = (county, currentCrop) => {\n    // This function will use the counties data for further processing\n    console.log('Counties data:', counties);\n    // Example: Find the district based on county\n    const countyData = counties.find(c => c.County === county);\n    if (countyData) {\n      console.log(`The county ${county} belongs to ${countyData.District}`);\n    } else {\n      console.log('County not found.');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Crop Rotation Planner</h1>\n      <CsvLoader onDataLoaded={setCounties} />\n      <CountyInput onSubmit={handleSubmit} />\n      {/* You can display the CSV data or use it for processing */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,mBAAmB,MAAM,kCAAkC;AAClE,OAAOC,SAAS,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE9C,MAAMU,YAAY,GAAGA,CAACC,MAAM,EAAEC,WAAW,KAAK;IAC5C;IACAC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEN,QAAQ,CAAC;IACvC;IACA,MAAMO,UAAU,GAAGP,QAAQ,CAACQ,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKP,MAAM,CAAC;IAC1D,IAAII,UAAU,EAAE;MACdF,OAAO,CAACC,GAAG,CAAC,cAAcH,MAAM,eAAeI,UAAU,CAACI,QAAQ,EAAE,CAAC;IACvE,CAAC,MAAM;MACLN,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAClC;EACF,CAAC;EAED,oBACET,OAAA;IAAKe,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBhB,OAAA;MAAAgB,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9BpB,OAAA,CAACF,SAAS;MAACuB,YAAY,EAAEjB;IAAY;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACxCpB,OAAA,CAACJ,WAAW;MAAC0B,QAAQ,EAAEjB;IAAa;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEpC,CAAC;AAEV;AAAClB,EAAA,CAvBQD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AAyBZ,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}