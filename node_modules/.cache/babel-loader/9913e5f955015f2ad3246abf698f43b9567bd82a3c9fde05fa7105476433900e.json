{"ast":null,"code":"var _jsxFileName = \"/Users/sarahsfolder/Documents/crop-rotation-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CsvLoader from './components/CsvLoader';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [counties, setCounties] = useState([]); // Store all counties from CSV\n  const [cropData, setCropData] = useState([]);\n  const [selectedCounty, setSelectedCounty] = useState(''); // Selected county\n  const [selectedCrop, setSelectedCrop] = useState(''); // Selected crop type\n  const [availableCrops, setAvailableCrops] = useState([]); // Filtered crops\n\n  // Define the crop rotation cycle\n  const cropRotationCycle = ['Legume', 'Root', 'Fruit', 'Leaf'];\n\n  // Log parsed CSV data to verify\n  const handleDataLoaded = csvData => {\n    console.log('Parsed CSV Data:', csvData); // Log the parsed CSV data\n    setCounties(csvData); // Store parsed county data\n  };\n  const handleCountyChange = e => {\n    console.log('Selected County:', e.target.value); // Log selected county\n    setSelectedCounty(e.target.value); // Update selected county\n  };\n  const handleCropChange = e => {\n    console.log('Selected Crop:', e.target.value); // Log selected crop type\n    setSelectedCrop(e.target.value); // Update selected crop type\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    // Filter the crops based on selected county and crop type\n    const filteredCrops = counties.filter(county => (selectedCounty === '' || county['County Name'] === selectedCounty) && (selectedCrop === '' || county['Crop'] === selectedCrop));\n    setAvailableCrops(filteredCrops); // Set the filtered crops to display\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"mission-statement\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to the Texas Crop Rotation Planner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Our mission is to provide sustainable crop rotation recommendations to farmers across Texas, helping them optimize yield, protect the soil, and promote environmentally-friendly farming practices.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CsvLoader, {\n      onDataLoaded: handleDataLoaded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"county-select\",\n        className: \"form-label\",\n        children: \"Select County:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"county-select\",\n        value: selectedCounty,\n        onChange: handleCountyChange,\n        className: \"form-select\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Choose a county--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), Array.from(new Set(counties.map(county => county['County Name']))).map((countyName, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: countyName,\n          children: countyName\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"crop-type-select\",\n        className: \"form-label\",\n        children: \"Select Crop Type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"crop-type-select\",\n        value: selectedCrop,\n        onChange: handleCropChange,\n        className: \"form-select\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Choose a crop type--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), Array.from(new Set(counties.map(county => county['Crop Type']))).map((crop, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: crop,\n          children: crop\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        children: \"Get Crop Recommendations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), availableCrops.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Available Crops\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: availableCrops.map((crop, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: crop.Crop\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this), \"  \", /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Type:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 20\n            }, this), \" \", crop['Crop Type']]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }, this), \" \"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rsHUSrUye62Z4bQfExRx3+VcJi8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","CsvLoader","jsxDEV","_jsxDEV","App","_s","counties","setCounties","cropData","setCropData","selectedCounty","setSelectedCounty","selectedCrop","setSelectedCrop","availableCrops","setAvailableCrops","cropRotationCycle","handleDataLoaded","csvData","console","log","handleCountyChange","e","target","value","handleCropChange","handleSubmit","preventDefault","filteredCrops","filter","county","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDataLoaded","onSubmit","htmlFor","id","onChange","Array","from","Set","map","countyName","index","crop","type","length","Crop","_c","$RefreshReg$"],"sources":["/Users/sarahsfolder/Documents/crop-rotation-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport CsvLoader from './components/CsvLoader';\nimport './App.css';\n\n\nfunction App() {\n  const [counties, setCounties] = useState([]);  // Store all counties from CSV\n  const [cropData, setCropData] = useState([]);\n  const [selectedCounty, setSelectedCounty] = useState('');  // Selected county\n  const [selectedCrop, setSelectedCrop] = useState('');  // Selected crop type\n  const [availableCrops, setAvailableCrops] = useState([]);  // Filtered crops\n\n  // Define the crop rotation cycle\n  const cropRotationCycle = ['Legume', 'Root', 'Fruit', 'Leaf'];\n\n\n  \n  // Log parsed CSV data to verify\n  const handleDataLoaded = (csvData) => {\n    console.log('Parsed CSV Data:', csvData);  // Log the parsed CSV data\n    setCounties(csvData);  // Store parsed county data\n  };\n\n  const handleCountyChange = (e) => {\n    console.log('Selected County:', e.target.value);  // Log selected county\n    setSelectedCounty(e.target.value);  // Update selected county\n  };\n\n  const handleCropChange = (e) => {\n    console.log('Selected Crop:', e.target.value);  // Log selected crop type\n    setSelectedCrop(e.target.value);  // Update selected crop type\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Filter the crops based on selected county and crop type\n    const filteredCrops = counties.filter(county =>\n      (selectedCounty === '' || county['County Name'] === selectedCounty) &&\n      (selectedCrop === '' || county['Crop'] === selectedCrop)\n    );\n    setAvailableCrops(filteredCrops);  // Set the filtered crops to display\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"mission-statement\">\n        <h1>Welcome to the Texas Crop Rotation Planner</h1>\n        <p>\n          Our mission is to provide sustainable crop rotation recommendations to\n          farmers across Texas, helping them optimize yield, protect the soil,\n          and promote environmentally-friendly farming practices.\n        </p>\n      </header>\n\n      {/* Load and parse the CSV data */}\n      <CsvLoader onDataLoaded={handleDataLoaded} />\n\n      {/* Form for filtering crops */}\n      <form onSubmit={handleSubmit} className=\"form-group\">\n        {/* Dropdown for county selection */}\n        <label htmlFor=\"county-select\" className=\"form-label\">Select County:</label>\n        <select id=\"county-select\" value={selectedCounty} onChange={handleCountyChange} className=\"form-select\">\n          <option value=\"\">--Choose a county--</option>\n          {Array.from(new Set(counties.map(county => county['County Name']))).map((countyName, index) => (\n            <option key={index} value={countyName}>\n              {countyName}\n            </option>\n          ))}\n        </select>\n\n        {/* Dropdown for crop type selection */}\n        <label htmlFor=\"crop-type-select\" className=\"form-label\">Select Crop Type:</label>\n        <select id=\"crop-type-select\" value={selectedCrop} onChange={handleCropChange} className=\"form-select\">\n          <option value=\"\">--Choose a crop type--</option>\n          {Array.from(new Set(counties.map(county => county['Crop Type']))).map((crop, index) => (\n            <option key={index} value={crop}>\n              {crop}\n            </option>\n          ))}\n        </select>\n\n        <button type=\"submit\" className=\"btn btn-primary\">Get Crop Recommendations</button>\n      </form>\n\n      {/* Display filtered crops */}\n      {availableCrops.length > 0 && (\n        <div>\n          <h2>Available Crops</h2>\n          <ul>\n            {availableCrops.map((crop, index) => (\n              <li key={index}>\n                <h3>{crop.Crop}</h3>  {/* Display the crop name */}\n                <p><strong>Type:</strong> {crop['Crop Type']}</p> {/* Display the crop type */}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EAC/C,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,cAAc,EAAEC,iBAAiB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EAC3D,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EACvD,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;;EAE3D;EACA,MAAMgB,iBAAiB,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC;;EAI7D;EACA,MAAMC,gBAAgB,GAAIC,OAAO,IAAK;IACpCC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,OAAO,CAAC,CAAC,CAAE;IAC3CX,WAAW,CAACW,OAAO,CAAC,CAAC,CAAE;EACzB,CAAC;EAED,MAAMG,kBAAkB,GAAIC,CAAC,IAAK;IAChCH,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAE;IAClDb,iBAAiB,CAACW,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAE;EACtC,CAAC;EAED,MAAMC,gBAAgB,GAAIH,CAAC,IAAK;IAC9BH,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAE;IAChDX,eAAe,CAACS,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAE;EACpC,CAAC;EAED,MAAME,YAAY,GAAIJ,CAAC,IAAK;IAC1BA,CAAC,CAACK,cAAc,CAAC,CAAC;IAClB;IACA,MAAMC,aAAa,GAAGtB,QAAQ,CAACuB,MAAM,CAACC,MAAM,IAC1C,CAACpB,cAAc,KAAK,EAAE,IAAIoB,MAAM,CAAC,aAAa,CAAC,KAAKpB,cAAc,MACjEE,YAAY,KAAK,EAAE,IAAIkB,MAAM,CAAC,MAAM,CAAC,KAAKlB,YAAY,CACzD,CAAC;IACDG,iBAAiB,CAACa,aAAa,CAAC,CAAC,CAAE;EACrC,CAAC;EAED,oBACEzB,OAAA;IAAK4B,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB7B,OAAA;MAAQ4B,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBACnC7B,OAAA;QAAA6B,QAAA,EAAI;MAA0C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnDjC,OAAA;QAAA6B,QAAA,EAAG;MAIH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAGTjC,OAAA,CAACF,SAAS;MAACoC,YAAY,EAAEpB;IAAiB;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAG7CjC,OAAA;MAAMmC,QAAQ,EAAEZ,YAAa;MAACK,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAElD7B,OAAA;QAAOoC,OAAO,EAAC,eAAe;QAACR,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC5EjC,OAAA;QAAQqC,EAAE,EAAC,eAAe;QAAChB,KAAK,EAAEd,cAAe;QAAC+B,QAAQ,EAAEpB,kBAAmB;QAACU,SAAS,EAAC,aAAa;QAAAC,QAAA,gBACrG7B,OAAA;UAAQqB,KAAK,EAAC,EAAE;UAAAQ,QAAA,EAAC;QAAmB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EAC5CM,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAACtC,QAAQ,CAACuC,GAAG,CAACf,MAAM,IAAIA,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAACe,GAAG,CAAC,CAACC,UAAU,EAAEC,KAAK,kBACxF5C,OAAA;UAAoBqB,KAAK,EAAEsB,UAAW;UAAAd,QAAA,EACnCc;QAAU,GADAC,KAAK;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC,eAGTjC,OAAA;QAAOoC,OAAO,EAAC,kBAAkB;QAACR,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAC;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAClFjC,OAAA;QAAQqC,EAAE,EAAC,kBAAkB;QAAChB,KAAK,EAAEZ,YAAa;QAAC6B,QAAQ,EAAEhB,gBAAiB;QAACM,SAAS,EAAC,aAAa;QAAAC,QAAA,gBACpG7B,OAAA;UAAQqB,KAAK,EAAC,EAAE;UAAAQ,QAAA,EAAC;QAAsB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EAC/CM,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAACtC,QAAQ,CAACuC,GAAG,CAACf,MAAM,IAAIA,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAACe,GAAG,CAAC,CAACG,IAAI,EAAED,KAAK,kBAChF5C,OAAA;UAAoBqB,KAAK,EAAEwB,IAAK;UAAAhB,QAAA,EAC7BgB;QAAI,GADMD,KAAK;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC,eAETjC,OAAA;QAAQ8C,IAAI,EAAC,QAAQ;QAAClB,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAC;MAAwB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/E,CAAC,EAGNtB,cAAc,CAACoC,MAAM,GAAG,CAAC,iBACxB/C,OAAA;MAAA6B,QAAA,gBACE7B,OAAA;QAAA6B,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxBjC,OAAA;QAAA6B,QAAA,EACGlB,cAAc,CAAC+B,GAAG,CAAC,CAACG,IAAI,EAAED,KAAK,kBAC9B5C,OAAA;UAAA6B,QAAA,gBACE7B,OAAA;YAAA6B,QAAA,EAAKgB,IAAI,CAACG;UAAI;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,MAAE,eACtBjC,OAAA;YAAA6B,QAAA,gBAAG7B,OAAA;cAAA6B,QAAA,EAAQ;YAAK;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACY,IAAI,CAAC,WAAW,CAAC;UAAA;YAAAf,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,KAAC;QAAA,GAF3CW,KAAK;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGV,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC/B,EAAA,CA/FQD,GAAG;AAAAgD,EAAA,GAAHhD,GAAG;AAiGZ,eAAeA,GAAG;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}