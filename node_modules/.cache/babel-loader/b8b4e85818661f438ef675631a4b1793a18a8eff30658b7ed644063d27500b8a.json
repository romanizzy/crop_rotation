{"ast":null,"code":"var _jsxFileName = \"/Users/sarahsfolder/Documents/crop-rotation-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CsvLoader from './components/CsvLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [counties, setCounties] = useState([]); // Store counties data from CSV\n  const [selectedCounty, setSelectedCounty] = useState(''); // Store selected county\n  const [selectedFruit, setSelectedFruit] = useState(''); // Store selected fruit\n  const [availableFruits, setAvailableFruits] = useState([]); // Store available fruits based on district\n\n  // Hardcoded fruits by district for now\n  const fruitsByDistrict = {\n    'Blacklands': ['Tomatoes', 'Peppers', 'Squash'],\n    'Southern High Plains': ['Melons', 'Peppers']\n    // Add more districts and fruits as needed\n  };\n  const handleDataLoaded = csvData => {\n    console.log('Loaded CSV Data:', csvData); // Log the parsed CSV data\n    setCounties(csvData); // Store the parsed CSV data\n  };\n  const handleCountyChange = e => {\n    const county = e.target.value;\n    setSelectedCounty(county);\n\n    // Find the district based on the selected county\n    const countyData = counties.find(c => c['County Name'] === county); // Adjust \"County Name\" based on your CSV header\n    if (countyData && fruitsByDistrict[countyData.District]) {\n      setAvailableFruits(fruitsByDistrict[countyData.District]); // Set fruits based on district\n    } else {\n      setAvailableFruits([]); // Clear fruits if no district match\n    }\n  };\n  const handleFruitChange = e => {\n    setSelectedFruit(e.target.value);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(`Selected County: ${selectedCounty}, Selected Fruit: ${selectedFruit}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Crop Rotation Planner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CsvLoader, {\n      onDataLoaded: handleDataLoaded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"county-select\",\n        children: \"Select County:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"county-select\",\n        value: selectedCounty,\n        onChange: handleCountyChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Choose a county--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), counties.map((county, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: county['County Name'],\n          children: county['County Name']\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fruit-select\",\n        children: \"Select Fruit:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"fruit-select\",\n        value: selectedFruit,\n        onChange: handleFruitChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Choose a fruit--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), availableFruits.map((fruit, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: fruit,\n          children: fruit\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Get Crop Recommendations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"yEjYBiNrVqX/nwsC2t0Tz3Xb1Nw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","CsvLoader","jsxDEV","_jsxDEV","App","_s","counties","setCounties","selectedCounty","setSelectedCounty","selectedFruit","setSelectedFruit","availableFruits","setAvailableFruits","fruitsByDistrict","handleDataLoaded","csvData","console","log","handleCountyChange","e","county","target","value","countyData","find","c","District","handleFruitChange","handleSubmit","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDataLoaded","onSubmit","htmlFor","id","onChange","map","index","fruit","type","_c","$RefreshReg$"],"sources":["/Users/sarahsfolder/Documents/crop-rotation-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport CsvLoader from './components/CsvLoader';\n\nfunction App() {\n  const [counties, setCounties] = useState([]); // Store counties data from CSV\n  const [selectedCounty, setSelectedCounty] = useState(''); // Store selected county\n  const [selectedFruit, setSelectedFruit] = useState(''); // Store selected fruit\n  const [availableFruits, setAvailableFruits] = useState([]); // Store available fruits based on district\n\n  // Hardcoded fruits by district for now\n  const fruitsByDistrict = {\n    'Blacklands': ['Tomatoes', 'Peppers', 'Squash'],\n    'Southern High Plains': ['Melons', 'Peppers'],\n    // Add more districts and fruits as needed\n  };\n\n  const handleDataLoaded = (csvData) => {\n    console.log('Loaded CSV Data:', csvData); // Log the parsed CSV data\n    setCounties(csvData); // Store the parsed CSV data\n  };\n\n  const handleCountyChange = (e) => {\n    const county = e.target.value;\n    setSelectedCounty(county);\n\n    // Find the district based on the selected county\n    const countyData = counties.find(c => c['County Name'] === county); // Adjust \"County Name\" based on your CSV header\n    if (countyData && fruitsByDistrict[countyData.District]) {\n      setAvailableFruits(fruitsByDistrict[countyData.District]); // Set fruits based on district\n    } else {\n      setAvailableFruits([]); // Clear fruits if no district match\n    }\n  };\n\n  const handleFruitChange = (e) => {\n    setSelectedFruit(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(`Selected County: ${selectedCounty}, Selected Fruit: ${selectedFruit}`);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Crop Rotation Planner</h1>\n\n      {/* Load and parse the CSV data */}\n      <CsvLoader onDataLoaded={handleDataLoaded} />\n\n      {/* Dropdown for county selection */}\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"county-select\">Select County:</label>\n        <select id=\"county-select\" value={selectedCounty} onChange={handleCountyChange}>\n          <option value=\"\">--Choose a county--</option>\n          {counties.map((county, index) => (\n            <option key={index} value={county['County Name']}>\n              {county['County Name']}\n            </option>\n          ))}\n        </select>\n\n        {/* Dropdown for fruit selection based on district */}\n        <label htmlFor=\"fruit-select\">Select Fruit:</label>\n        <select id=\"fruit-select\" value={selectedFruit} onChange={handleFruitChange}>\n          <option value=\"\">--Choose a fruit--</option>\n          {availableFruits.map((fruit, index) => (\n            <option key={index} value={fruit}>\n              {fruit}\n            </option>\n          ))}\n        </select>\n\n        <button type=\"submit\">Get Crop Recommendations</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}