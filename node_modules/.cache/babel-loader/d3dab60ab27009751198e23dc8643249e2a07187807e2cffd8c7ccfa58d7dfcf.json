{"ast":null,"code":"var _jsxFileName = \"/Users/sarahsfolder/Documents/crop-rotation-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CsvLoader from './components/CsvLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [crops, setCrops] = useState([]); // Store all crops from CSV\n  const [selectedCounty, setSelectedCounty] = useState(''); // Selected county\n  const [selectedCropType, setSelectedCropType] = useState(''); // Selected crop type\n  const [availableCrops, setAvailableCrops] = useState([]); // Filtered crops\n\n  const handleDataLoaded = csvData => {\n    setCrops(csvData); // Store all the crop data\n  };\n  const handleCountyChange = e => {\n    setSelectedCounty(e.target.value);\n  };\n  const handleCropTypeChange = e => {\n    setSelectedCropType(e.target.value);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    // Filter crops based on selected county and crop type\n    const filteredCrops = crops.filter(crop => crop.District === selectedCounty && crop.Type === selectedCropType);\n    setAvailableCrops(filteredCrops);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Texas Crop Rotation Planner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CsvLoader, {\n      onDataLoaded: handleDataLoaded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"county-select\",\n        className: \"form-label\",\n        children: \"Select County:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"county-select\",\n        value: selectedCounty,\n        onChange: handleCountyChange,\n        className: \"form-select\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Choose a county--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), Array.from(new Set(crops.map(crop => crop.District))).map((district, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: district,\n          children: district\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"crop-type-select\",\n        className: \"form-label\",\n        children: \"Select Crop Type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"crop-type-select\",\n        value: selectedCropType,\n        onChange: handleCropTypeChange,\n        className: \"form-select\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Choose a crop type--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Legume\",\n          children: \"Legume\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Root\",\n          children: \"Root\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Fruit\",\n          children: \"Fruit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Leaf\",\n          children: \"Leaf\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        children: \"Get Crop Recommendations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), availableCrops.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Available Crops\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: availableCrops.map((crop, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [crop.Crop, \" - Plant: \", crop['Planting Season'], \", Harvest: \", crop['Harvest Season']]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"t3HQmKP3P9mB8zTqITVZH7y+1PQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","CsvLoader","jsxDEV","_jsxDEV","App","_s","crops","setCrops","selectedCounty","setSelectedCounty","selectedCropType","setSelectedCropType","availableCrops","setAvailableCrops","handleDataLoaded","csvData","handleCountyChange","e","target","value","handleCropTypeChange","handleSubmit","preventDefault","filteredCrops","filter","crop","District","Type","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDataLoaded","onSubmit","htmlFor","id","onChange","Array","from","Set","map","district","index","type","length","Crop","_c","$RefreshReg$"],"sources":["/Users/sarahsfolder/Documents/crop-rotation-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport CsvLoader from './components/CsvLoader';\n\nfunction App() {\n  const [crops, setCrops] = useState([]);  // Store all crops from CSV\n  const [selectedCounty, setSelectedCounty] = useState('');  // Selected county\n  const [selectedCropType, setSelectedCropType] = useState('');  // Selected crop type\n  const [availableCrops, setAvailableCrops] = useState([]);  // Filtered crops\n\n  const handleDataLoaded = (csvData) => {\n    setCrops(csvData);  // Store all the crop data\n  };\n\n  const handleCountyChange = (e) => {\n    setSelectedCounty(e.target.value);\n  };\n\n  const handleCropTypeChange = (e) => {\n    setSelectedCropType(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Filter crops based on selected county and crop type\n    const filteredCrops = crops.filter(crop =>\n      crop.District === selectedCounty && crop.Type === selectedCropType\n    );\n    setAvailableCrops(filteredCrops);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Texas Crop Rotation Planner</h1>\n\n      {/* Load and parse the CSV data */}\n      <CsvLoader onDataLoaded={handleDataLoaded} />\n\n      {/* Dropdown for county selection */}\n      <form onSubmit={handleSubmit} className=\"form-group\">\n        <label htmlFor=\"county-select\" className=\"form-label\">Select County:</label>\n        <select id=\"county-select\" value={selectedCounty} onChange={handleCountyChange} className=\"form-select\">\n          <option value=\"\">--Choose a county--</option>\n          {Array.from(new Set(crops.map(crop => crop.District))).map((district, index) => (\n            <option key={index} value={district}>\n              {district}\n            </option>\n          ))}\n        </select>\n\n        {/* Dropdown for crop type selection */}\n        <label htmlFor=\"crop-type-select\" className=\"form-label\">Select Crop Type:</label>\n        <select id=\"crop-type-select\" value={selectedCropType} onChange={handleCropTypeChange} className=\"form-select\">\n          <option value=\"\">--Choose a crop type--</option>\n          <option value=\"Legume\">Legume</option>\n          <option value=\"Root\">Root</option>\n          <option value=\"Fruit\">Fruit</option>\n          <option value=\"Leaf\">Leaf</option>\n        </select>\n\n        <button type=\"submit\" className=\"btn btn-primary\">Get Crop Recommendations</button>\n      </form>\n\n      {/* Display filtered crops */}\n      {availableCrops.length > 0 && (\n        <div>\n          <h2>Available Crops</h2>\n          <ul>\n            {availableCrops.map((crop, index) => (\n              <li key={index}>\n                {crop.Crop} - Plant: {crop['Planting Season']}, Harvest: {crop['Harvest Season']}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}