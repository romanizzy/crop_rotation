{"ast":null,"code":"var _jsxFileName = \"/Users/sarahsfolder/Documents/crop-rotation-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CsvLoader from './components/CsvLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [counties, setCounties] = useState([]); // Store counties data from CSV\n  const [selectedCounty, setSelectedCounty] = useState(''); // Store selected county\n\n  const handleDataLoaded = csvData => {\n    setCounties(csvData); // Store the parsed CSV data\n  };\n  const handleCountyChange = e => {\n    setSelectedCounty(e.target.value); // Set the selected county\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    // Perform logic based on the selected county\n    const countyData = counties.find(c => c.County === selectedCounty);\n    if (countyData) {\n      console.log(`The county ${selectedCounty} belongs to ${countyData.District}`);\n    } else {\n      console.log('County not found.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Crop Rotation Planner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CsvLoader, {\n      onDataLoaded: handleDataLoaded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"county-select\",\n        children: \"Select County:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"county-select\",\n        value: selectedCounty,\n        onChange: handleCountyChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Choose a county--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), counties.map((county, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: county.County,\n          children: county.County\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Get Crop Recommendations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"qq6gjEQwSMHSQy+idUSA2gp37jA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","CsvLoader","jsxDEV","_jsxDEV","App","_s","counties","setCounties","selectedCounty","setSelectedCounty","handleDataLoaded","csvData","handleCountyChange","e","target","value","handleSubmit","preventDefault","countyData","find","c","County","console","log","District","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDataLoaded","onSubmit","htmlFor","id","onChange","map","county","index","type","_c","$RefreshReg$"],"sources":["/Users/sarahsfolder/Documents/crop-rotation-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport CsvLoader from './components/CsvLoader';\n\nfunction App() {\n  const [counties, setCounties] = useState([]); // Store counties data from CSV\n  const [selectedCounty, setSelectedCounty] = useState(''); // Store selected county\n\n  const handleDataLoaded = (csvData) => {\n    setCounties(csvData); // Store the parsed CSV data\n  };\n\n  const handleCountyChange = (e) => {\n    setSelectedCounty(e.target.value); // Set the selected county\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Perform logic based on the selected county\n    const countyData = counties.find(c => c.County === selectedCounty);\n    if (countyData) {\n      console.log(`The county ${selectedCounty} belongs to ${countyData.District}`);\n    } else {\n      console.log('County not found.');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Crop Rotation Planner</h1>\n\n      {/* Load and parse the CSV data */}\n      <CsvLoader onDataLoaded={handleDataLoaded} />\n\n      {/* Dropdown for county selection */}\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"county-select\">Select County:</label>\n        <select id=\"county-select\" value={selectedCounty} onChange={handleCountyChange}>\n          <option value=\"\">--Choose a county--</option>\n          {counties.map((county, index) => (\n            <option key={index} value={county.County}>\n              {county.County}\n            </option>\n          ))}\n        </select>\n\n        <button type=\"submit\">Get Crop Recommendations</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}